IRC client reference:
    HexChat
Using standard RFC 1459

Commands to include:
            /* For 42 */
    // explicitely required
    KICK            KICK <#channel> <nickname> [<comment>]
    INVITE          INVITE <nickname> <#channelname>
    TOPIC           TOPIC <#channel> [<topic>]
    MODE            MODE <#channel> <+|-> <i|t|k|o|l> [<limit|user|password>]

    // implicitely required
    PASS            PASS <password>
    NICK            NICK <nickname>
    USER            USER <username> <hostname> <servername> <:realname>
    JOIN            JOIN <#channel> [<key>]
    PRIVMSG         PRIVMSG <receiver>[,<receiver>] <message>

            /* For HexChat */
    PONG            PONG <daemon>
    PART            PART <#channel>[,<#channel>]
    OPER // we're not implementing server operators, this doesn't make sense :(
    QUIT            QUIT [<message>]


Class/Struct variables
    Server
        -vector<Channel>    channels
        -vector<Client>     clients
        -int                port
        -string             password

    Channel
        -vector<Client&> clients
        -vector<Client&> operators
        -int             channelId

    Client
        -struct pollfd& connection
        -bool           is_authenticated
        -bool           is_regestered
        -time           last_active
        -int            clientId
        -string         message_buffer
        -string         nickname
        -string         username
        -string         realname


Message Descriptions

Basic message format

[:<prefix>] <COMMAND> [<param>] [:<text>]
a message can have a prefix, which contains no whitespace. this is often used
for telling clients from who a message originated.

errors, as well as certain types of replies, are identified by number, so the
message looks like
[:<prefix>] 000 [<param>] :error/reply message


// server command
PASS <password>
    authenticates a client, must be done before any messages can be posted.
    should be sent before one of USER or NICK
    REPLIES:
        ERR_NEEDMOREPARAMS -- 461 <command> :Not enough parameters
        ERR_ALREADYREGISTRED -- 462 :You may not reregister

// server command
NICK <nickname>
    Sets a clients display name to %nickname. if the name is already in use,
    drop this message and respond with error 436 (don't know how this works,
    or if it's entirely required)
    REPIES:
        ERR_NONICKNAMEGIVEN -- 431 :No nickname given
        ERR_ERRONEUSNICKNAME -- 432 <nick> :Erroneus nickname
        ERR_NICKNAMEINUSE -- 433 <nick> :Nickname is already in use
        ERR_NICKCOLLISION -- 436 <nick> :Nickname collision KILL // maybe not used?

// server command
USER <username> <hostname> <servername> <realname>
    mostly useless information to us, but should be stored, and is required
    before a user can send messages.
    REPLIES:
        ERR_NEEDMOREPARAMS -- 461 <command> :Not enough parameters
        ERR_ALREADYREGISTRED -- 462 :You may not reregister

// server command
JOIN <channel>{, <channel} [<key>{, <key>}]
    joins a user to a channel. key is the password, if required.
    if the channel is invite only, there must be an invite for the sender
    REPLIES:
        ERR_NEEDMOREPARAMS -- 461 <command> :Not enough parameters
        ERR_INVITEONLYCHAN -- 473 <channel> :Cannot join channel (+i)
        ERR_BADCHANNELKEY -- 475 <channel> :Cannot join channel (+k)
        ERR_CHANNELISFULL -- 471 <channel> :Cannot join channel (+l)
        ERR_NOSUCHCHANNEL -- 403 <channel name> :No such channel
        RPL_TOPIC -- 332 <channel> :<topic>

// server command
PRIVMSG <receiver>{, <receiver>} <text to be sent>
    Attempts to send a message to all of the receivers. Each receiver can be
    either a channel or a user, we will not support host masks
    Messages are sent like
        :<sender> PRIVMSG <receiver>{, <receiver>} <text to be sent>
    Replies:
        ERR_NORECIPIENT -- 411 :No recipient given <command>
        ERR_NOTEXTTOSEND -- 412 :No text to send
        ERR_CANNOTSENDTOCHAN -- 404 <channel name> :Cannot send to channel
        ERR_NOSUCHNICK -- 401 :No such nickname/channel

// channel command
KICK <channel> <user> [comment]
    remove %user from %channel if the client sending the message has operator
    in %channel. send back a response of what the server did?
    REPLIES:
        ERR_NEEDMOREPARAMS -- 461 <command> :Not enough parameters
        ERR_NOSUCHCHANNEL -- 403 <channel name> :No such channel
        ERR_CHANOPRIVSNEEDED -- 482 <channel> :You're not channel operator
        ERR_NOTONCHANNEL -- 442 <channel> :You're not on that channel

// channel command
INVITE <user> <channel>
    invite a user to a channel that is invite only
    REPLIES:
        ERR_NEEDMOREPARAMS -- 461 <command> :Not enough parameters
        ERR_NOSUCHNICK -- 401 :No such nickname/channel
        ERR_NOTONCHANNEL -- 442 <channel> :You're not on that channel
        ERR_USERONCHANNEL -- 443 <user> <channel> :User already on channel
        ERR_CHANOPRIVSNEEDED -- 482 <channel> :You're not channel operator
        RPL_INVITING -- <channel> <nick>

// channel command
TOPIC <channel> [<topic>]
    get or set the topic or a channel
    REPLIES:
        ERR_NEEDMOREPARAMS -- 461 <command> :Not enough parameters
        ERR_NOTONCHANNEL -- 442 <channel> :You're not on that channel
        RPL_NOTOPIC -- 331 <channel> :No topic is set
        RPL_TOPIC -- 332 <channel> :<topic>
        ERR_CHANOPRIVSNEEDED -- 482 <channel> :You're not channel operator

// channel command
MODE <channel> {[+|-]|o|p|s|i|t|n|b|v} [<limit>] [<user>]
    haha not my job :)
    REPLIES:
        ERR_NEEDMOREPARAMS -- 461 <command> :Not enough parameters
        RPL_CHANNELMODEIS -- 324 <channel> <mode> <mode params>
        ERR_CHANOPRIVSNEEDED -- 482 <channel> :You're not channel operator
        ERR_NOSUCHNICK -- 401 :No such nickname/channel
        ERR_NOTONCHANNEL -- 442 <channel> :You're not on that channel
        ERR_KEYSET -- 467 <channel> :Channel key already set
        ERR_UNKNOWNMODE -- 472 <char> :is unknown mode char to me
        ERR_NOSUCHCHANNEL -- 403 <channel name> :No such channel


/// OPTIONAL

// server command
PONG <param?>
    response from a sent ping. we should send a ping every 120? seconds the
    client is inactive, then if no response received within another 30? seconds,
    close the connection
    REPLIES:
        N/A

// channel[s] command
PART <channel> {, <channel>}
    removes the client from all given %channel
    REPLIES:
        ERR_NEEDMOREPARAMS -- 461 <command> :Not enough parameters
        ERR_NOSUCHCHANNEL -- 403 <channel name> :No such channel
        ERR_NOTONCHANNEL -- 442 <channel> :You're not on that channel

// server command
QUIT [:Quit message]
    disconnects the client from the server
    REPLIES:
        N/A
